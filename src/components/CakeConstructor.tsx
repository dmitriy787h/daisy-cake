'use client';

import { useState } from 'react';
import { Plus, Minus } from 'lucide-react';

interface ConstructorForm {
  customerName: string;
  phone: string;
  email?: string;
  deliveryDate: string;
  deliveryTime: string;
  deliveryAddress?: string;
  notes?: string;
}

const CakeConstructor = () => {
  const [activeTab, setActiveTab] = useState('size');
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [selectedSize, setSelectedSize] = useState({
    id: '1kg',
    name: '1 –∫–≥',
    basePrice: 2500,
    diameter: 18,
    servings: 6,
    height: 8
  });

  const [selectedShape, setSelectedShape] = useState('round');
  const [selectedCakeVariant, setSelectedCakeVariant] = useState<string>('');
  const [selectedDecorations, setSelectedDecorations] = useState<string[]>([]);
  const [selectedPackaging, setSelectedPackaging] = useState('standard');
  const [selectedHandmadeCandles, setSelectedHandmadeCandles] = useState(0);
  const [selectedNumberCandles, setSelectedNumberCandles] = useState(0);
  const [customText, setCustomText] = useState('');

  const shapes = [
    { id: 'round', name: '–ö—Ä—É–≥–ª—ã–π', price: 0, icon: '‚≠ï' },
    { id: 'heart', name: '–í —Ñ–æ—Ä–º–µ —Å–µ—Ä–¥—Ü–∞', price: 100, icon: '‚ù§Ô∏è' }
  ];

  const sizes = [
    { id: 'bento', name: '–ë–µ–Ω—Ç–æ', price: 1499, diameter: 11 },
    { id: '1kg', name: '1 –∫–≥', price: 2500, diameter: 18 },
    { id: '1.5kg', name: '1,5 –∫–≥', price: 3000, diameter: 20 },
    { id: '2kg', name: '2 –∫–≥', price: 4000, diameter: 22 },
    { id: '2.5kg', name: '2,5 –∫–≥', price: 5000, diameter: 24 },
    { id: '3kg', name: '3 –∫–≥', price: 6000, diameter: 26 },
    { id: '3.5kg', name: '3,5 –∫–≥', price: 7000, diameter: 28 },
    { id: '4kg', name: '4 –∫–≥', price: 8000, diameter: 30 }
  ];

  const cakeVariants = [
    { id: 'chocolate-caramel-banana', name: '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å –∫–∞—Ä–∞–º–µ–ª—å—é –∏ –±–∞–Ω–∞–Ω–æ–º', price: 0 },
    { id: 'chocolate-snickers', name: '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –°–Ω–∏–∫–µ—Ä—Å', price: 0 },
    { id: 'chocolate-coconut', name: '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å –∫–æ–∫–æ—Å–æ–º', price: 0 },
    { id: 'honey-strawberry', name: '–ú–µ–¥–æ–≤—ã–π —Å –∫–ª—É–±–Ω–∏–∫–æ–π', price: 0 },
    { id: 'vanilla-strawberry-coconut', name: '–í–∞–Ω–∏–ª—å–Ω—ã–π —Å –∫–ª—É–±–Ω–∏–∫–æ–π –∏ –∫–æ–∫–æ—Å–æ–º', price: 0 },
    { id: 'vanilla-berries', name: '–í–∞–Ω–∏–ª—å–Ω—ã–π —Å –ª–µ—Å–Ω—ã–º–∏ —è–≥–æ–¥–∞–º–∏', price: 0 },
    { id: 'vanilla-chocolate-coffee', name: '–í–∞–Ω–∏–ª—å–Ω—ã–π —Å —à–æ–∫–æ–ª–∞–¥–Ω–æ–π –∫—Ä–æ—à–∫–æ–π –∏ –∫–æ—Ñ–µ', price: 0 },
    { id: 'red-velvet-cherry', name: '–ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç —Å –≤–∏—à–Ω–µ–π', price: 0 }
  ];

  const decorations = [
    { id: 'fresh-fruits', name: '–°–≤–µ–∂–∏–µ —Ñ—Ä—É–∫—Ç—ã', price: 300 },
    { id: 'chocolate-chips', name: '–®–æ–∫–æ–ª–∞–¥–Ω–∞—è –∫—Ä–æ—à–∫–∞', price: 150 },
    { id: 'sugar-flowers', name: '–°–∞—Ö–∞—Ä–Ω—ã–µ —Ü–≤–µ—Ç—ã', price: 500 },
    { id: 'macarons', name: '–ú–∞–∫–∞—Ä—É–Ω—ã', price: 400 }
  ];

  const packaging = [
    { id: 'standard', name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞', price: 0 },
    { id: 'premium', name: '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞', price: 200 }
  ];

  const handmadeCandlePrice = 60;
  const numberCandlePrice = 220;

  const calculateTotalPrice = () => {
    let total = selectedSize.basePrice;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ —Ñ–æ—Ä–º—É
    const shapePrice = shapes.find(s => s.id === selectedShape)?.price || 0;
    total += shapePrice;
    
    // –î–ª—è —Ç–æ—Ä—Ç–æ–≤ –æ—Ç 1–∫–≥ - –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    // –î–ª—è –±–µ–Ω—Ç–æ - –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ –¥–µ–∫–æ—Ä
    selectedDecorations.forEach(decorationId => {
      const decoration = decorations.find(d => d.id === decorationId);
      if (decoration) total += decoration.price;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ —É–ø–∞–∫–æ–≤–∫—É
    const packagingPrice = packaging.find(p => p.id === selectedPackaging)?.price || 0;
    total += packagingPrice;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ —Å–≤–µ—á–∏
    total += selectedHandmadeCandles * handmadeCandlePrice;
    total += selectedNumberCandles * numberCandlePrice;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ —Ç–µ–∫—Å—Ç
    if (customText) total += 50;
    
    // –°–∫–∏–¥–∫–∞ –∑–∞ –±–æ–ª—å—à–∏–µ –∑–∞–∫–∞–∑—ã
    if (total > 5000) {
      total = Math.floor(total * 0.95);
    }
    
    return total;
  };

  const tabs = [
    { id: 'size', name: '–†–∞–∑–º–µ—Ä', icon: 'üìè', step: 1 },
    { id: 'variant', name: '–í–∞—Ä–∏–∞–Ω—Ç', icon: 'üç∞', step: 2 },
    { id: 'decorations', name: '–î–µ–∫–æ—Ä', icon: '‚ú®', step: 3 },
    { id: 'extras', name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', icon: 'üïØÔ∏è', step: 4 }
  ];

  const [formData, setFormData] = useState<ConstructorForm>({
    customerName: '',
    phone: '',
    email: '',
    deliveryDate: '',
    deliveryTime: '',
    deliveryAddress: '',
    notes: ''
  });

  const totalPrice = calculateTotalPrice();

  const renderSizeSelector = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ—Ä—Ç–∞</h3>
      <div className="grid grid-cols-3 gap-4">
        {sizes.map((size) => (
          <button
            key={size.id}
            onClick={() => {
              setSelectedSize({
                id: size.id,
                name: size.name,
                basePrice: size.price,
                diameter: size.diameter,
                servings: size.diameter === 11 ? 2 : size.diameter === 18 ? 6 : 12,
                height: 8
              });
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑–º–µ—Ä–∞
              setSelectedCakeVariant('');
            }}
            className={`p-4 rounded-lg border-2 transition-all hover:scale-105 ${
              selectedSize.id === size.id
                ? 'border-pink-500 bg-pink-50'
                : 'border-gray-200 hover:border-pink-300'
            }`}
          >
            <div className="text-center">
              <div className="text-2xl mb-2">üç∞</div>
              <div className="font-semibold">{size.name}</div>
              <div className="text-sm text-gray-600">√ò{size.diameter}—Å–º</div>
              <div className="text-lg font-bold text-pink-600">–æ—Ç {size.price}‚ÇΩ</div>
            </div>
          </button>
        ))}
      </div>
      
      {/* –í—ã–±–æ—Ä —Ñ–æ—Ä–º—ã */}
      <div className="mt-6">
        <h4 className="text-md font-semibold mb-3">–§–æ—Ä–º–∞ —Ç–æ—Ä—Ç–∞</h4>
        <div className="grid grid-cols-2 gap-4">
          {shapes.map((shape) => (
            <button
              key={shape.id}
              onClick={() => setSelectedShape(shape.id)}
              className={`p-3 rounded-lg border-2 transition-all hover:scale-105 ${
                selectedShape === shape.id
                  ? 'border-pink-500 bg-pink-50'
                  : 'border-gray-200 hover:border-pink-300'
              }`}
            >
              <div className="flex items-center justify-center space-x-2">
                <span className="text-xl">{shape.icon}</span>
                <span className="font-medium">{shape.name}</span>
                {shape.price > 0 && (
                  <span className="text-sm text-pink-600">+{shape.price}‚ÇΩ</span>
                )}
              </div>
            </button>
          ))}
        </div>
      </div>
    </div>
  );

  const renderVariantSelector = () => {
    // –î–ª—è –±–µ–Ω—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if (selectedSize.id === 'bento') {
      return (
        <div className="space-y-4">
          <h3 className="text-lg font-semibold mb-4">–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ—Ä—Ç–∞</h3>
          <div className="p-6 bg-gray-50 rounded-lg text-center">
            <p className="text-gray-600">–î–ª—è –±–µ–Ω—Ç–æ-—Ç–æ—Ä—Ç–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã</p>
            <p className="text-sm text-gray-500 mt-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Ç 1–∫–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞</p>
          </div>
        </div>
      );
    }

    // –î–ª—è —Ç–æ—Ä—Ç–æ–≤ –æ—Ç 1–∫–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    return (
      <div className="space-y-4">
        <h3 className="text-lg font-semibold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ—Ä—Ç–∞ *</h3>
        {!selectedCakeVariant && (
          <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <p className="text-yellow-800 text-sm">‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ—Ä—Ç–∞</p>
          </div>
        )}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {cakeVariants.map((variant) => (
            <div
              key={variant.id}
              className={`p-4 border rounded-lg hover:border-pink-300 transition-all hover:scale-105 cursor-pointer ${
                selectedCakeVariant === variant.id
                  ? 'border-pink-500 bg-pink-50'
                  : 'border-gray-200'
              }`}
              onClick={() => setSelectedCakeVariant(variant.id)}
            >
              <div className="flex items-center space-x-4">
                <div className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center">
                  <span className="text-2xl">üç∞</span>
                </div>
                <div className="flex-1">
                  <div className="font-semibold">{variant.name}</div>
                  <div className="text-sm text-gray-600">
                    –í–∫–ª—é—á–µ–Ω–æ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderDecorationSelector = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∫–æ—Ä</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {decorations.map((decoration) => (
          <div
            key={decoration.id}
            className={`p-4 border rounded-lg hover:border-pink-300 transition-all hover:scale-105 cursor-pointer ${
              selectedDecorations.includes(decoration.id)
                ? 'border-pink-500 bg-pink-50'
                : 'border-gray-200'
            }`}
            onClick={() => {
              if (selectedDecorations.includes(decoration.id)) {
                setSelectedDecorations(selectedDecorations.filter(id => id !== decoration.id));
              } else {
                setSelectedDecorations([...selectedDecorations, decoration.id]);
              }
            }}
          >
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center">
                <span className="text-2xl">‚ú®</span>
              </div>
              <div className="flex-1">
                <div className="font-semibold">{decoration.name}</div>
                <div className="text-sm text-gray-600">+{decoration.price}‚ÇΩ</div>
              </div>
              <button className="px-4 py-2 bg-pink-500 text-white rounded-lg hover:bg-pink-600 transition-colors">
                {selectedDecorations.includes(decoration.id) ? '–£–±—Ä–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderExtrasSelector = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h3>
      
      {/* –°–≤–µ—á–∏ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã */}
      <div className="bg-gray-50 rounded-lg p-4">
        <h4 className="font-semibold mb-3">üïØÔ∏è –°–≤–µ—á–∏ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã</h4>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setSelectedHandmadeCandles(Math.max(0, selectedHandmadeCandles - 1))}
              className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center hover:bg-gray-300"
            >
              <Minus className="w-4 h-4" />
            </button>
            <span className="text-lg font-semibold min-w-[2rem] text-center">{selectedHandmadeCandles}</span>
            <button
              onClick={() => setSelectedHandmadeCandles(selectedHandmadeCandles + 1)}
              className="w-8 h-8 bg-pink-500 text-white rounded-full flex items-center justify-center hover:bg-pink-600"
            >
              <Plus className="w-4 h-4" />
            </button>
          </div>
          <div className="text-sm text-gray-600">
            {selectedHandmadeCandles > 0 ? `${handmadeCandlePrice}‚ÇΩ √ó ${selectedHandmadeCandles} = ${selectedHandmadeCandles * handmadeCandlePrice}‚ÇΩ` : '60‚ÇΩ –∑–∞ —à—Ç—É–∫—É'}
          </div>
        </div>
      </div>

      {/* –°–≤–µ—á–∏-—Ü–∏—Ñ—Ä—ã */}
      <div className="bg-gray-50 rounded-lg p-4">
        <h4 className="font-semibold mb-3">üî¢ –°–≤–µ—á–∏-—Ü–∏—Ñ—Ä—ã</h4>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setSelectedNumberCandles(Math.max(0, selectedNumberCandles - 1))}
              className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center hover:bg-gray-300"
            >
              <Minus className="w-4 h-4" />
            </button>
            <span className="text-lg font-semibold min-w-[2rem] text-center">{selectedNumberCandles}</span>
            <button
              onClick={() => setSelectedNumberCandles(selectedNumberCandles + 1)}
              className="w-8 h-8 bg-pink-500 text-white rounded-full flex items-center justify-center hover:bg-pink-600"
            >
              <Plus className="w-4 h-4" />
            </button>
          </div>
          <div className="text-sm text-gray-600">
            {selectedNumberCandles > 0 ? `–æ—Ç ${numberCandlePrice}‚ÇΩ √ó ${selectedNumberCandles} = –æ—Ç ${selectedNumberCandles * numberCandlePrice}‚ÇΩ` : '–æ—Ç 220‚ÇΩ –∑–∞ —à—Ç—É–∫—É'}
          </div>
        </div>
      </div>

      {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å */}
      <div className="bg-gray-50 rounded-lg p-4">
        <h4 className="font-semibold mb-3">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å</h4>
        <input
          type="text"
          value={customText}
          onChange={(e) => setCustomText(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ—Ä—Ç–∞"
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
        />
        <div className="text-sm text-gray-600 mt-2">+50‚ÇΩ –∑–∞ –Ω–∞–¥–ø–∏—Å—å</div>
      </div>
    </div>
  );

  const renderCurrentTab = () => {
    switch (activeTab) {
      case 'size':
        return renderSizeSelector();
      case 'variant':
        return renderVariantSelector();
      case 'decorations':
        return renderDecorationSelector();
      case 'extras':
        return renderExtrasSelector();
      default:
        return renderSizeSelector();
    }
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-4">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–æ—Ä—Ç–æ–≤</h1>
        <p className="text-lg text-gray-600">
          –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ—Ä—Ç, –≤—ã–±—Ä–∞–≤ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        </p>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-medium text-gray-700">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
          <span className="text-sm font-medium text-gray-700">
            {tabs.findIndex(tab => tab.id === activeTab) + 1} –∏–∑ {tabs.length}
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className="bg-gradient-to-r from-pink-500 to-purple-600 h-2 rounded-full transition-all duration-300"
            style={{
              width: `${((tabs.findIndex(tab => tab.id === activeTab) + 1) / tabs.length) * 100}%`
            }}
          />
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow-lg p-6 sticky top-4">
            <h3 className="text-lg font-semibold mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
            <div className="space-y-2">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`w-full flex items-center space-x-3 p-3 rounded-lg transition-all ${
                    activeTab === tab.id
                      ? 'bg-pink-100 text-pink-700 border-2 border-pink-300'
                      : 'hover:bg-gray-50 text-gray-700'
                  }`}
                >
                  <span className="text-xl">{tab.icon}</span>
                  <span className="font-medium">{tab.name}</span>
                </button>
              ))}
            </div>

            {/* –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ */}
            <div className="mt-6 pt-6 border-t border-gray-200">
              <h4 className="font-semibold mb-3">–í–∞—à —Ç–æ—Ä—Ç</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>–†–∞–∑–º–µ—Ä:</span>
                  <span className="font-semibold">{selectedSize.name}</span>
                </div>
                <div className="flex justify-between">
                  <span>–§–æ—Ä–º–∞:</span>
                  <span className="font-semibold">
                    {shapes.find(s => s.id === selectedShape)?.name}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>–í–∞—Ä–∏–∞–Ω—Ç:</span>
                  <span className="font-semibold">
                    {selectedSize.id === 'bento' 
                      ? '–ù–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω' 
                      : selectedCakeVariant 
                        ? cakeVariants.find(v => v.id === selectedCakeVariant)?.name 
                        : '–ù–µ –≤—ã–±—Ä–∞–Ω'
                    }
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>–î–µ–∫–æ—Ä:</span>
                  <span className="font-semibold">{selectedDecorations.length}</span>
                </div>
                {selectedHandmadeCandles > 0 && (
                  <div className="flex justify-between">
                    <span>–°–≤–µ—á–∏ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã:</span>
                    <span className="font-semibold">{selectedHandmadeCandles} —à—Ç. √ó 60‚ÇΩ = {selectedHandmadeCandles * 60}‚ÇΩ</span>
                  </div>
                )}
                {selectedNumberCandles > 0 && (
                  <div className="flex justify-between">
                    <span>–°–≤–µ—á–∏-—Ü–∏—Ñ—Ä—ã:</span>
                    <span className="font-semibold">{selectedNumberCandles} —à—Ç. √ó –æ—Ç 220‚ÇΩ = –æ—Ç {selectedNumberCandles * 220}‚ÇΩ</span>
                  </div>
                )}
                {customText && (
                  <div className="flex justify-between">
                    <span>–¢–µ–∫—Å—Ç:</span>
                    <span className="font-semibold">&ldquo;{customText}&rdquo;</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            {renderCurrentTab()}
          </div>

          {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å */}
          <div className="bg-white rounded-lg p-6 shadow-lg">
            <h3 className="text-lg font-semibold mb-4">–ò—Ç–æ–≥–æ</h3>
            <div className="text-center">
              <div className="text-3xl font-bold text-pink-600">{totalPrice}‚ÇΩ</div>
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ */}
          <div className="bg-white rounded-lg p-6 shadow-lg mt-6">
            <h3 className="text-lg font-semibold mb-4">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</h3>
            <form onSubmit={(e) => {
              e.preventDefault();
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞–Ω (–¥–ª—è —Ç–æ—Ä—Ç–æ–≤ –æ—Ç 1–∫–≥)
              if (selectedSize.id !== 'bento' && !selectedCakeVariant) {
                setActiveTab('variant');
                return;
              }
              
              const orderText = `üç∞ –ó–∞–∫–∞–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞ Daisy Cake

üë§ –ö–ª–∏–µ–Ω—Ç: ${formData.customerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìß Email: ${formData.email}
üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${formData.deliveryAddress}
üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${formData.deliveryDate}
üïê –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${formData.deliveryTime}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.notes || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

üéÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä—Ç–∞:
‚Ä¢ –†–∞–∑–º–µ—Ä: ${selectedSize.name}
‚Ä¢ –§–æ—Ä–º–∞: ${shapes.find(s => s.id === selectedShape)?.name}
${selectedSize.id !== 'bento' ? `‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç: ${selectedCakeVariant ? cakeVariants.find(v => v.id === selectedCakeVariant)?.name : '–ù–µ –≤—ã–±—Ä–∞–Ω'}` : ''}
‚Ä¢ –î–µ–∫–æ—Ä: ${selectedDecorations.map(id => decorations.find(d => d.id === id)?.name).join(', ')}
‚Ä¢ –£–ø–∞–∫–æ–≤–∫–∞: ${packaging.find(p => p.id === selectedPackaging)?.name}
${selectedHandmadeCandles > 0 ? `‚Ä¢ –°–≤–µ—á–∏ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã: ${selectedHandmadeCandles} —à—Ç. √ó 60‚ÇΩ = ${selectedHandmadeCandles * 60}‚ÇΩ` : ''}
${selectedNumberCandles > 0 ? `‚Ä¢ –°–≤–µ—á–∏-—Ü–∏—Ñ—Ä—ã: ${selectedNumberCandles} —à—Ç. √ó –æ—Ç 220‚ÇΩ = –æ—Ç ${selectedNumberCandles * 220}‚ÇΩ` : ''}
${customText ? `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å: "${customText}"` : ''}

üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice}‚ÇΩ

üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: [—É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å]
üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: [—É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É]
üïê –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: [—É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è]

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üéÇ

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞`;

              const telegramUrl = `https://t.me/daisy_cake_sochi?text=${encodeURIComponent(orderText)}`;
              
              // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
              const newWindow = window.open(telegramUrl, '_blank');
              if (!newWindow) {
                // –ï—Å–ª–∏ popup –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
                window.location.href = telegramUrl;
              }
            }} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ò–º—è *
                </label>
                <input
                  value={formData.customerName}
                  onChange={(e) => setFormData({...formData, customerName: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="–í–∞—à–µ –∏–º—è"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –¢–µ–ª–µ—Ñ–æ–Ω *
                </label>
                <input
                  value={formData.phone}
                  onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="8 (938) 405-25-90"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  type="email"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="your@email.com"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                </label>
                <input
                  value={formData.deliveryAddress}
                  onChange={(e) => setFormData({...formData, deliveryAddress: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="–≥. –°–æ—á–∏, —É–ª. –ü–ª–∞—Å—Ç—É–Ω—Å–∫–∞—è, –¥. 151/5"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ *
                  </label>
                  <input
                    value={formData.deliveryDate}
                    onChange={(e) => setFormData({...formData, deliveryDate: e.target.value})}
                    type="date"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ *
                  </label>
                  <input
                    value={formData.deliveryTime}
                    onChange={(e) => setFormData({...formData, deliveryTime: e.target.value})}
                    type="time"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                </label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => setFormData({...formData, notes: e.target.value})}
                  rows={3}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                />
              </div>

              <div className="space-y-3">
                <button
                  type="submit"
                  disabled={selectedSize.id !== 'bento' && !selectedCakeVariant}
                  className={`w-full font-semibold py-3 px-6 rounded-lg transition-all duration-300 ${
                    selectedSize.id !== 'bento' && !selectedCakeVariant
                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                      : 'bg-gradient-to-r from-pink-500 to-purple-600 text-white hover:from-pink-600 hover:to-purple-700 transform hover:scale-105'
                  }`}
                >
                  {selectedSize.id !== 'bento' && !selectedCakeVariant
                    ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ—Ä—Ç–∞' 
                    : `–ó–∞–∫–∞–∑–∞—Ç—å –∑–∞ ${totalPrice}‚ÇΩ`
                  }
                </button>
                <button
                  type="button"
                  className="w-full border-2 border-pink-500 text-pink-500 font-semibold py-3 px-6 rounded-lg hover:bg-pink-50 transition-colors"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CakeConstructor;